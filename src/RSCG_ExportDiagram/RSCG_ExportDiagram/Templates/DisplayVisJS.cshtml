@inherits RazorBlade.PlainTextTemplate<ExportAssembly>

@{
    var assemblyName= Model.AssemblyName;
    var extRefClasses = Model.ClassesWithExternalReferences;
    var assemblyReferences = Model.ClassesWithExternalReferences
                .SelectMany(it => it.MethodsWithExternalReferences)
                .SelectMany(it => it.References)
                .GroupBy(it => it.AssemblyName)
                .ToDictionary(it => it.Key, it => it.ToArray());
    var eq = new Eq<ExternalReferenceExport>((x, y) => x.FullClassName() == y.FullClassName());
    List<string> data = new List<string>();
    foreach (var item in Model.ClassesWithExternalReferences)
{
 foreach (var extClass in item.ExternalClasses())
{
        string refName = $"{item.ClassName}|{extClass}";
        data.Add(refName);  
}

}


data = data.Distinct().ToList();


    
}
<!DOCTYPE html>
<html lang="en">
<head>
    <title>@assemblyName</title>

    <style>
        body {
            color: #d3d3d3;
            font: 12pt arial;
            background-color: #222222;
        }

        #mynetwork {
            width: 800px;
            height: 800px;
            border: 1px solid #444444;
            background-color: #222222;
        }
    </style>

    <script type="text/javascript"
            src="vis-network.min.js"></script>
</head>

<body>
    <div id="mynetwork"></div>
    <script type="text/javascript">
        var color = "gray";
        var len = undefined;
        var nodes = [{
            id:'@assemblyName', label: '@assemblyName', group: '@assemblyName',
            shape: "hexagon",
            shapeProperties: { borderDashes: [5, 5] }
        }];
        var edges = [];
        @{
        foreach (var expClass in extRefClasses){
            <text>
            nodes.push({
                id: '@expClass.ClassName', label: "@expClass.ClassName",
                group: '@assemblyName',
                shape: "star",
                shapeProperties: { borderDashes: [5, 5] },
            });
            edges.push({ from: '@assemblyName', to: '@expClass.ClassName' });
            </text>
        }
        }
        @foreach (var key in assemblyReferences.Keys){

var typeNames = assemblyReferences[key]
    .Distinct(eq)
    //.Select(it => it.TypeName)
    //.Distinct()
    .ToArray();
        
        <text>
        nodes.push({
            id:'@key', label: '@key', group: '@key',
            shape: "ellipse",
            shapeProperties: { borderDashes: [5, 5] }
        });
        </text>
@foreach (var typeName in typeNames)
{
string name = $"{typeName.FullClassName()}[{typeName.TypeName}]";
<text>
nodes.push({
            id:'@typeName.FullClassName()', label: '@typeName.TypeName', group: '@key',
            shape: "box",
            shapeProperties: { borderDashes: [5, 5] }
        });
                edges.push({ from: '@key', to: '@typeName.FullClassName()' });
</text>
}



        }

@foreach(var item in data){
                var s = item.Split('|');
                var className = s[0];
                var extClass = s[1];
<text>
edges.push({ from: '@className', to: '@extClass' });

</text>
            }
        // create a network
        var container = document.getElementById("mynetwork");
        var data = {
            nodes: nodes,
            edges: edges,
        };
        var options = {
            nodes: {
                shape: "dot",
                size: 30,
                font: {
                    size: 32,
                    color: "#ffffff",
                },
                borderWidth: 2,
            },
            edges: {
                width: 2,
            },
        };
        network = new vis.Network(container, data, options);
    </script>
</body>
</html>
